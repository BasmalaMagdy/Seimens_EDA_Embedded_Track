/*
 * can.h
 *
 *  Created on: Sep 7, 2021
 *      Author: hs
 */

#ifndef CAN_H_
#define CAN_H_
// **************************** mode ********************************
#define RCGC0_CLOCK_MODE       (*((volatile unsigned long*)0x400FE100))
#define RCGC2_CLOCK_PORT       (*((volatile unsigned long*)0x400FE108))


//********************** REG ************************

#define GPIOA 0
#define GPIOB 1
#define GPIOE 4
#define GPIOF 5

#define can0 24
#define can1 25

typedef enum
{
     CAN_0, CAN_1;
}CAN_MODE_Config;

/********************************************************************************************************************/
 /********************************************************************************************************************/
 /*************************              CANBIT Register Field Setting   p.1063                                    *************************/
 /*************************              ------------------------------------                                      *************************/
 /*************************              TSEG2      --> Phase2 - 1         --> TSeg2 -1 = 1-1               = 0    *************************/
 /*************************              TSEG1      --> Prop + Phase1 - 1  --> TSeg1 -1 = 3-1                =2    *************************/
 /*************************              SJW        --> SJW - 1            --> SJW -1 = 1-1                  = 0   *************************/
 /*************************              BRP        --> BRP -1             --> = Baud rate prescaler - 1= 5-1=4     *************************/
 /********************************************************************************************************************/
 /********************************************************************************************************************/
typedef struct
{
    uint8_t TSEG2;
    uint8_t TSEG1;
    uint8_t SJW;
    uint8_t BRP;
}BIT_TIME_Config;

typedef enum
{
    A,B,E,F;
}CAN_PORT_Config;

typedef struct
{
    CAN_MODE_Config can_mode;
    BIT_TIME_Config bit_time;
    CAN_PORT_Config can_port;
}CAN_Config;

#endif /* CAN_H_ */
